coded$condition = fct_recode(coded$stimType,
"Speaker Aware" = "belief",
"Speaker Unaware" = "no_belief")
table(distinct(coded, subject, gender)$gender)
mean(distinct(coded, subject, age)$age)
sd(distinct(coded, subject, age)$age)
range(distinct(coded, subject, age)$age)
only_unique_subjects = coded %>%
distinct(subject, gender, assignment, age)
table(only_unique_subjects$assignment)
summary(aov(data = only_unique_subjects,
age ~ assignment))
df_with_gender = only_unique_subjects %>%
group_by(assignment, gender) %>%
summarise(num_gender = n())
M = as.table(rbind(filter(df_with_gender, assignment == "4a")$num_gender,
rbind(filter(df_with_gender, assignment == "4b")$num_gender)))
dimnames(M) <- list(gender = c("Female", "Male"),
assignment = c("4a", "4b"))
M
chisq.test(M)
coded$trial_condition = fct_recode(factor(coded$stimType), speaker_aware = "belief", speaker_unaware="no_belief")
coded.3a = filter(coded, assignment == "4a")
coded.3b = filter(coded, assignment == "4b")
exp.mst.1 <- filter(dat, answer != "" & question %in% c(6, 7, 8, 9, 10, 11, 12, 13)) %>% group_by(subject) %>% summarise(exp.inf.1=sum(Code.SR))
spon.1 = filter(dat, answer != "" & question %in% c(1)) %>% group_by(subject) %>% summarise(spon.1 = Code.SR)
rc.1 <- filter(dat, answer != "" & question %in% c(2, 3, 4, 5, 14)) %>% group_by(subject) %>% summarise(rc.1=sum(Code.SR))
spon.true = filter(dat, answer != "" & question %in% c(1)) %>% group_by(subject) %>% summarise(spon.true = Spon.Actual)
exp.mst.2 <- filter(dat, answer != "" & question %in% c(6, 7, 8, 9, 10, 11, 12, 13)) %>% group_by(subject) %>% summarise(exp.inf.2=sum(Code.AL))
spon.2 = filter(dat, answer != "" & question %in% c(1)) %>% group_by(subject) %>% summarise(spon.2 = Code.AL)
rc.2 <- filter(dat, answer != "" & question %in% c(2, 3, 4, 5, 14)) %>% group_by(subject) %>% summarise(rc.2=sum(Code.AL))
sst_all = merge(exp.mst.1, spon.1)
sst_all = merge(sst_all, rc.1)
sst_all = merge(sst_all, exp.mst.2)
sst_all = merge(sst_all, spon.2)
sst_all = merge(sst_all, rc.2)
sst_all = merge(sst_all, spon.true)
sst_3a = sst_all %>%
filter(subject %in% coded.3a$subject)
sst_3b = sst_all %>%
filter(subject %in% coded.3b$subject)
sst = filter(dat, answer != "")
exp.inf.k = cbind(filter(sst, question %in% c(6, 7, 8, 9, 10, 11, 12, 13))$Code.SR, filter(sst, question %in% c(6, 7, 8, 9, 10, 11, 12, 13))$Code.AL)
rc.k = cbind(filter(sst, question %in% c(2, 3, 4, 5, 14))$Code.SR, filter(sst, question %in% c(2, 3, 4, 5, 14))$Code.AL)
spon.k = cbind(filter(sst, question ==1 )$Code.SR, filter(sst, question ==1)$Code.AL)
exp.inf.kappa = cohen.kappa(exp.inf.k)
rc.kappa = cohen.kappa(rc.k)
spon.kappa = cohen.kappa(spon.k)
exp.inf.kappa
rc.kappa
spon.kappa
cor.test(sst_all$exp.inf.1, sst_all$exp.inf.2)
cor.test(sst_all$rc.1, sst_all$rc.2)
cor.test(sst_all$spon.1, sst_all$spon.2)
ggplot(sst_all, aes(x=exp.inf.1, exp.inf.2)) +
geom_jitter() +
ggtitle("Second coder by first coder: explicit M.S. reasoning") +
xlab("First coder") +
ylab("Second coder") +
geom_smooth(method="lm") +
scale_x_continuous(limits=c(0, 16)) +
scale_y_continuous(limits=c(0, 16)) +
theme_minimal()
sst_all$exp.inf.mean = (sst_all$exp.inf.1 + sst_all$exp.inf.2) / 2
sst_all$rc.mean = (sst_all$rc.1 + sst_all$rc.2) / 2
sst_all$spon.mean = (sst_all$spon.1 + sst_all$spon.2) / 2
# Recast
write.csv(sst_all, "data/output/all_sst.csv")
cor.test(sst_all$exp.inf.mean, sst_all$rc.mean)
cor.test(sst_all$exp.inf.mean, sst_all$spon.true)
cor.test(sst_all$rc.mean, sst_all$spon.true)
just_demo = coded %>%
group_by(subject, age, gender) %>% summarise(mean_request = mean(numeric_categorization))
sst_plus_demo = merge(sst_all, just_demo, by = "subject")
cor.test(sst_plus_demo$age, sst_plus_demo$exp.inf.mean)
cor.test(sst_plus_demo$age, sst_plus_demo$rc.mean)
cor.test(sst_plus_demo$age, sst_plus_demo$spon.true)
summary(aov(data = sst_plus_demo,
exp.inf.mean ~ gender))
summary(aov(data = sst_plus_demo,
rc.mean ~ gender))
summary(aov(data = sst_plus_demo,
spon.true ~ gender))
main_plus_sst = merge(coded, sst_all, by="subject")
main_plus_sst$Congruent = (main_plus_sst$condition == "Speaker Unaware" & main_plus_sst$categorization == "Yes" & main_plus_sst$assignment == "4a") |
(main_plus_sst$condition == "Speaker Aware" & main_plus_sst$categorization == "No" & main_plus_sst$assignment == "4a") |
(main_plus_sst$condition == "Speaker Unaware" & main_plus_sst$categorization == "No" & main_plus_sst$assignment == "4b") |
(main_plus_sst$condition == "Speaker Aware" & main_plus_sst$categorization == "Yes" & main_plus_sst$assignment == "4b")
main_plus_sst$Congruence = fct_recode(as.character(main_plus_sst$Congruent),
"congruent" = "TRUE",
"incongruent" = "FALSE")
write.csv(main_plus_sst, "data/output/coded_plus_sst.csv")
coded_3a = main_plus_sst %>%
filter(assignment == "4a")
length(unique(coded_3a$subject))
coded_3b = main_plus_sst %>%
filter(assignment == "4b")
length(unique(coded_3b$subject))
main_plus_sst$numeric_categorization2 = ifelse(main_plus_sst$assignment=="4b",
1 - main_plus_sst$numeric_categorization,
main_plus_sst$numeric_categorization)
main_plus_sst$exp_group = fct_recode(main_plus_sst$assignment,
"Inference" = "4a",
"Knowledge" = "4b")
main_plus_sst %>%
ggplot(aes(x = exp_group,
y = numeric_categorization2,
fill = condition)) +
geom_bar(stat="summary", fun.y="mean", position = "dodge") +
stat_summary (fun.y = function(x){mean(x)},
fun.ymin = function(x){mean(x) - 1*sd(x)/sqrt(length(x))},
fun.ymax = function(x){mean(x) + 1*sd(x)/sqrt(length(x))},
geom= 'pointrange',
position=position_dodge(width=0.95)) +
labs(x = "Experimental group",
y = "Proportion of responses",
title = "Response by condition and group") +
theme_minimal() +
facet_grid(~exp_group)
ggsave("Figures/experiment1_effect.tiff",
units="in", width=6, height=4, dpi=300)
ggsave("Figures/experiment1_effect.pdf",
units="in", width=6, height=4, dpi=300)
mixed.logit = glmer(factor(categorization) ~ stimType + (1 + stimType | subject) +
(1 + stimType | stimNum),
data = coded_3a,
control=glmerControl(optimizer="bobyqa"),
family=binomial)
mixed.logit.null = glmer(factor(categorization) ~ (1  + stimType | subject) +
(1 + stimType | stimNum),
data = coded_3a,
control=glmerControl(optimizer="bobyqa"),
family=binomial)
comparison = anova(mixed.logit.null, mixed.logit)
comparison
mixed.logit = glmer(factor(categorization) ~ stimType * order +
(1 + stimType | subject) +
(1 + stimType | stimNum),
data = coded_3a,
control=glmerControl(optimizer="bobyqa"),
family=binomial)
mixed.logit.null = glmer(factor(categorization) ~ stimType + order +
(1 + stimType | subject) +
(1 + stimType | stimNum),
data = coded_3a,
control=glmerControl(optimizer="bobyqa"),
family=binomial)
comparison = anova(mixed.logit.null, mixed.logit)
comparison
mixed.logit = glmer(factor(categorization) ~ stimType +
(1 + stimType | stimNum),
data = filter(coded_3a, order ==1 ),
control=glmerControl(optimizer="bobyqa"),
family=binomial)
mixed.logit.null = glmer(factor(categorization) ~ (1 + stimType | stimNum),
data = filter(coded_3a, order ==1 ),
control=glmerControl(optimizer="bobyqa"),
family=binomial)
comparison = anova(mixed.logit.null, mixed.logit)
comparison
mixed.logit = glmer(factor(categorization) ~ stimType + (1 + stimType | subject) +
(1 + stimType | stimNum),
data = coded_3b,
control=glmerControl(optimizer="bobyqa"),
family=binomial)
mixed.logit.null = glmer(factor(categorization) ~ (1  + stimType | subject) +
(1 + stimType | stimNum),
data = coded_3b,
control=glmerControl(optimizer="bobyqa"),
family=binomial)
comparison = anova(mixed.logit.null, mixed.logit)
comparison
mixed.logit = glmer(factor(categorization) ~ stimType * order +
(1 + stimType | subject) +
(1 + stimType | stimNum),
data = coded_3b,
control=glmerControl(optimizer="bobyqa"),
family=binomial)
mixed.logit.null = glmer(factor(categorization) ~ stimType + order +
(1 + stimType | subject) +
(1 + stimType | stimNum),
data = coded_3b,
control=glmerControl(optimizer="bobyqa"),
family=binomial)
comparison = anova(mixed.logit.null, mixed.logit)
comparison
mixed.logit = glmer(factor(categorization) ~ stimType +
(1 | stimNum),
data = filter(coded_3b, order ==1 ),
control=glmerControl(optimizer="bobyqa"),
family=binomial)
mixed.logit.null = glmer(factor(categorization) ~ (1 | stimNum),
data = filter(coded_3b, order ==1 ),
control=glmerControl(optimizer="bobyqa"),
family=binomial)
comparison = anova(mixed.logit.null, mixed.logit)
comparison
coded_3a$rc.bins = cut(coded_3a$rc.mean, breaks=c(0, median(coded_3a$rc.mean), 11), labels=c("low", "high"))
mixed.logit.both = glmer(factor(categorization) ~ stimType*exp.inf.mean +
stimType * rc.bins +
(1 + stimType  | stimNum),
data = coded_3a,
family=binomial)
mixed.logit.both.reduced = glmer(factor(categorization) ~ exp.inf.mean +
stimType * rc.bins +
(1 + stimType  | stimNum),
data = coded_3a,
family=binomial)
mixed.logit.both.reduced2 = glmer(factor(categorization) ~ exp.inf.mean * stimType + rc.bins +
(1 + stimType  | stimNum),
data = coded_3a,
family=binomial)
mixed.logit.inf= glmer(factor(categorization) ~ exp.inf.mean * stimType +
(1 + stimType  | stimNum),
control=glmerControl(optimizer="bobyqa"),
data = coded_3a,
family=binomial)
mixed.logit.inf.reduced = glmer(factor(categorization) ~ exp.inf.mean + stimType +
(1 + stimType  | stimNum),
data = coded_3a,
control=glmerControl(optimizer="bobyqa"),
family=binomial)
anova(mixed.logit.both, mixed.logit.both.reduced)
anova(mixed.logit.both, mixed.logit.both.reduced2)
anova(mixed.logit.inf, mixed.logit.inf.reduced)
mixed.logit.spon = glmer(factor(categorization) ~ stimType*factor(spon.true) +
(1 + stimType | stimNum),
data = coded_3a,
family=binomial)
mixed.logit.spon.reduced = glmer(factor(categorization) ~ stimType + factor(spon.true) +
(1 + stimType | stimNum),
data = coded_3a,
family=binomial)
anova(mixed.logit.spon, mixed.logit.spon.reduced)
coded_3b$rc.bins = cut(coded_3b$rc.mean, breaks=c(0, median(coded_3b$rc.mean), 11), labels=c("low", "high"))
mixed.logit.both = glmer(factor(categorization) ~ stimType*exp.inf.mean +
stimType * rc.bins +
(1 + stimType  | stimNum),
control=glmerControl(optimizer="bobyqa"),
data = coded_3b,
family=binomial)
mixed.logit.both.reduced = glmer(factor(categorization) ~ exp.inf.mean +
stimType * rc.bins +
(1 + stimType  | stimNum),
control=glmerControl(optimizer="bobyqa"),
data = coded_3b,
family=binomial)
mixed.logit.both.reduced2 = glmer(factor(categorization) ~ exp.inf.mean * stimType + rc.bins +
(1 + stimType  | stimNum),
data = coded_3b,
control=glmerControl(optimizer="bobyqa"),
family=binomial)
mixed.logit.inf= glmer(factor(categorization) ~ exp.inf.mean * stimType +
(1 + stimType  | stimNum),
control=glmerControl(optimizer="bobyqa"),
data = coded_3b,
family=binomial)
mixed.logit.inf.reduced = glmer(factor(categorization) ~ exp.inf.mean + stimType +
(1 + stimType  | stimNum),
data = coded_3b,
control=glmerControl(optimizer="bobyqa"),
family=binomial)
anova(mixed.logit.both, mixed.logit.both.reduced)
anova(mixed.logit.both, mixed.logit.both.reduced2)
anova(mixed.logit.inf, mixed.logit.inf.reduced)
mixed.logit.spon = glmer(factor(categorization) ~ stimType*factor(spon.true) +
(1 + stimType | stimNum),
data = coded_3b,
family=binomial)
mixed.logit.spon.reduced = glmer(factor(categorization) ~ stimType + factor(spon.true) +
(1 + stimType | stimNum),
data = coded_3b,
family=binomial)
anova(mixed.logit.spon, mixed.logit.spon.reduced)
main_plus_sst %>%
ggplot(aes(x=exp.inf.mean, fill=Congruence)) +
geom_density(alpha=.5) +
theme_minimal() +
scale_fill_manual(values = c("congruent" = "seagreen2", "incongruent" = "tomato1")) +
xlab("Mentalizing score") +
ggtitle("Response congruence by mentalizing") +
facet_wrap(~assignment, ncol = 2)
main_plus_sst %>%
ggplot(aes(x=exp.inf.mean, fill=categorization)) +
geom_density(alpha=.5) +
theme_minimal() +
# scale_fill_manual(values = c("congruent" = "seagreen2", "incongruent" = "tomato1")) +
xlab("Mentalizing score") +
ggtitle("Response congruence by mentalizing") +
facet_grid(~assignment + condition)
main_plus_sst %>%
ggplot(aes(x = exp_group,
y = numeric_categorization2,
fill = condition)) +
geom_bar(stat="summary", fun.y="mean", position = "dodge") +
stat_summary (fun.y = function(x){mean(x)},
fun.ymin = function(x){mean(x) - 1*sd(x)/sqrt(length(x))},
fun.ymax = function(x){mean(x) + 1*sd(x)/sqrt(length(x))},
geom= 'pointrange',
position=position_dodge(width=0.95)) +
labs(x = "Experimental group",
y = "Proportion of responses",
title = "Response by condition and group") +
theme_minimal() +
facet_grid(~exp_group)
main_plus_sst %>%
ggplot(aes(x = condition,
y = numeric_categorization2)) +
geom_bar(stat="summary", fun.y="mean", position = "dodge") +
stat_summary (fun.y = function(x){mean(x)},
fun.ymin = function(x){mean(x) - 1*sd(x)/sqrt(length(x))},
fun.ymax = function(x){mean(x) + 1*sd(x)/sqrt(length(x))},
geom= 'pointrange',
position=position_dodge(width=0.95)) +
labs(x = "Experimental group",
y = "Proportion of responses",
title = "Response by condition and group") +
theme_minimal() +
facet_grid(~exp_group)
ggsave("Figures/experiment1_effect.tiff",
units="in", width=6, height=4, dpi=300)
ggsave("Figures/experiment1_effect.pdf",
units="in", width=6, height=4, dpi=300)
main_plus_sst %>%
ggplot(aes(x = condition,
y = numeric_categorization2)) +
geom_bar(stat="summary", fun.y="mean", position = "dodge") +
stat_summary (fun.y = function(x){mean(x)},
fun.ymin = function(x){mean(x) - 1*sd(x)/sqrt(length(x))},
fun.ymax = function(x){mean(x) + 1*sd(x)/sqrt(length(x))},
geom= 'pointrange',
position=position_dodge(width=0.95)) +
labs(x = "Condition",
y = "Proportion of responses",
title = "Response by condition and group") +
theme_minimal() +
facet_grid(~exp_group)
ggsave("Figures/experiment1_effect.tiff",
units="in", width=6, height=4, dpi=300)
ggsave("Figures/experiment1_effect.pdf",
units="in", width=6, height=4, dpi=300)
main_plus_sst %>%
ggplot(aes(x = condition,
y = numeric_categorization2)) +
geom_point(stat="summary", fun.y="mean", position = "dodge") +
stat_summary (fun.y = function(x){mean(x)},
fun.ymin = function(x){mean(x) - 1*sd(x)/sqrt(length(x))},
fun.ymax = function(x){mean(x) + 1*sd(x)/sqrt(length(x))},
geom= 'pointrange',
position=position_dodge(width=0.95)) +
labs(x = "Condition",
y = "Proportion of responses",
title = "Response by condition and group") +
theme_minimal() +
facet_grid(~exp_group)
main_plus_sst %>%
ggplot(aes(x = condition,
y = numeric_categorization2)) +
geom_point(stat="summary", fun.y="mean") +
stat_summary (fun.y = function(x){mean(x)},
fun.ymin = function(x){mean(x) - 1*sd(x)/sqrt(length(x))},
fun.ymax = function(x){mean(x) + 1*sd(x)/sqrt(length(x))},
geom= 'pointrange',
position=position_dodge(width=0.95)) +
labs(x = "Condition",
y = "Proportion of responses",
title = "Response by condition and group") +
theme_minimal() +
facet_grid(~exp_group)
library(tidyverse)
library(forcats)
library(lme4)
library(effects)
library(psych)
setwd("/Users/seantrott/Dropbox/UCSD/Research/IndirectSpeechActs/2019_mentalizing_data/Experiment1/")
coded = read_csv("data/coded_plus_sst.csv")
main_plus_sst = read_csv("data/coded_plus_sst.csv")
table(distinct(main_plus_sst, subject, gender)$gender)
mean(distinct(main_plus_sst, subject, age)$age)
sd(distinct(main_plus_sst, subject, age)$age)
range(distinct(main_plus_sst)$age)
only_unique_subjects = coded %>%
distinct(subject, gender, assignment, age)
table(only_unique_subjects$assignment)
summary(aov(data = only_unique_subjects,
age ~ assignment))
df_with_gender = only_unique_subjects %>%
group_by(assignment, gender) %>%
summarise(num_gender = n())
M = as.table(rbind(filter(df_with_gender, assignment == "4a")$num_gender,
rbind(filter(df_with_gender, assignment == "4b")$num_gender)))
dimnames(M) <- list(gender = c("Female", "Male"),
assignment = c("4a", "4b"))
M
chisq.test(M)
coded_3a = main_plus_sst %>%
filter(assignment == "4a")
length(unique(coded_3a$subject))
coded_3b = main_plus_sst %>%
filter(assignment == "4b")
length(unique(coded_3b$subject))
main_plus_sst %>%
ggplot(aes(x = condition,
y = numeric_categorization2)) +
geom_bar(stat="summary", fun.y="mean", position = "dodge") +
stat_summary (fun.y = function(x){mean(x)},
fun.ymin = function(x){mean(x) - 1*sd(x)/sqrt(length(x))},
fun.ymax = function(x){mean(x) + 1*sd(x)/sqrt(length(x))},
geom= 'pointrange',
position=position_dodge(width=0.95)) +
labs(x = "Condition",
y = "Proportion of responses",
title = "Response by condition and group") +
theme_minimal() +
geom_hline(yintercept = .5, linetype = "dotted") +
facet_grid(~exp_group)
ggsave("Figures/experiment1_effect.png",
units="in", width=6, height=4, dpi=300)
ggsave("Figures/experiment1_effect.tiff",
units="in", width=6, height=4, dpi=300)
ggsave("Figures/experiment1_effect.pdf",
units="in", width=6, height=4, dpi=300)
ggsave("Figures/experiment1_effect.png",
units="in", width=6, height=4, dpi=300)
ggsave("Figures/experiment1_effect.tiff",
units="in", width=6, height=4, dpi=300)
ggsave("Figures/experiment1_effect.pdf",
units="in", width=6, height=4, dpi=300)
coded_3a$rc.bins = cut(coded_3a$rc.mean, breaks=c(0, median(coded_3a$rc.mean), 11), labels=c("low", "high"))
mixed.logit.both = glmer(factor(categorization) ~ stimType*exp.inf.mean +
stimType * rc.bins +
(1 + stimType  | stimNum),
data = coded_3a,
family=binomial)
mixed.logit.both.reduced = glmer(factor(categorization) ~ exp.inf.mean +
stimType * rc.bins +
(1 + stimType  | stimNum),
data = coded_3a,
family=binomial)
mixed.logit.both.reduced2 = glmer(factor(categorization) ~ exp.inf.mean * stimType + rc.bins +
(1 + stimType  | stimNum),
data = coded_3a,
family=binomial)
mixed.logit.inf= glmer(factor(categorization) ~ exp.inf.mean * stimType +
(1 + stimType  | stimNum),
control=glmerControl(optimizer="bobyqa"),
data = coded_3a,
family=binomial)
mixed.logit.inf.reduced = glmer(factor(categorization) ~ exp.inf.mean + stimType +
(1 + stimType  | stimNum),
data = coded_3a,
control=glmerControl(optimizer="bobyqa"),
family=binomial)
anova(mixed.logit.both, mixed.logit.both.reduced)
anova(mixed.logit.both, mixed.logit.both.reduced2)
anova(mixed.logit.inf, mixed.logit.inf.reduced)
library(tidyverse)
library(forcats)
library(lme4)
library(psych)
setwd("/Users/seantrott/Dropbox/UCSD/Research/IndirectSpeechActs/2019_mentalizing_data/Experiment2")
setwd("/Users/seantrott/Dropbox/UCSD/Research/IndirectSpeechActs/2019_mentalizing_data/Experiment2")
main_plus_sst = read_csv("data/experiment5_agg.csv")
table(distinct(main_plus_sst, subject, Gender)$Gender)
mean(distinct(main_plus_sst, subject, Age)$Age)
sd(distinct(main_plus_sst, subject, Age)$Age)
range(distinct(main_plus_sst, subject, Age)$Age)
main_plus_sst$knowledge <- factor(main_plus_sst$knowledge, levels = c("implicit", "explicit"))
main_plus_sst %>%
ggplot(aes(x = Condition,
y = numeric_code)) +
# geom_bar(stat="summary", fun.y="mean", position="dodge", fill="#7293cb") +
geom_bar(stat="summary", fun.y="mean", position="dodge") +
theme_minimal() +
stat_summary (fun.y = function(x){mean(x)},
fun.ymin = function(x){mean(x) - 1*sd(x)/sqrt(length(x))},
fun.ymax = function(x){mean(x) + 1*sd(x)/sqrt(length(x))},
geom= 'pointrange',
position=position_dodge(width=0.95)) +
labs(x = "",
y = "Proportion of request interpretations",
title = "Requests by speaker awareness and knowledge delivery") +
geom_hline(yintercept = .5, linetype = "dotted") +
scale_y_continuous(limits=c(0, 1)) +
facet_grid(~knowledge)
ggsave("figures/exp5_knowledge_effect.tiff",
units="in", width=6, height=4, dpi=300)
ggsave("/Users/seantrott/Dropbox/UCSD/Research/IndirectSpeechActs/presentations/CRL/Figures/exp5_knowledge_main_effect.pdf",
units="in", width=6, height=4, dpi=300)
model_all = glmer(data=main_plus_sst, answer ~ stimType * knowledge +
(1  + stimType | subject) + (1 + stimType | stimNum) + (1 | group),
control=glmerControl(optimizer="bobyqa"),
family=binomial())
main_plus_sst$answer
main_plus_sst$answer = factor(main_plus_sst$answer)
model_all = glmer(data=main_plus_sst,
answer ~ stimType * knowledge +
(1  + stimType | subject) + (1 + stimType | stimNum) + (1 | group),
control=glmerControl(optimizer="bobyqa"),
family=binomial())
main_plus_sst %>%
group_by(Condition) %>%
summarise(mean_request = mean(numeric_code),
sd_request = sd(numeric_code))
main_plus_sst %>%
group_by(Condition, knowledge) %>%
summarise(mean_request = mean(numeric_code),
sd_request = sd(numeric_code))
main_plus_sst %>%
group_by(knowledge, Condition) %>%
summarise(mean_request = mean(numeric_code),
sd_request = sd(numeric_code))
